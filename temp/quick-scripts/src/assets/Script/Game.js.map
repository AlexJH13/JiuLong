{"version":3,"sources":["assets/Script/Game.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport { XY } from \"../XYUtils/XYUtils\";\nimport Cell from \"./Cell\";\nimport { Config } from \"./Config\";\n\nconst {ccclass, property} = cc._decorator;\n\ntype MatrixCell = {\n    node: cc.Node,\n}\n\n@ccclass\nexport default class Game extends cc.Component {\n\n    @property(cc.Prefab)\n    cellPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    mainNode: cc.Node = null;\n\n    @property(cc.Node)\n    graphicsNode: cc.Node = null;\n\n    @property(Cell)\n    sumCell: Cell = null;\n\n    // 5*7 的二维数组\n    // matrix: cc.Node[][]  = [];\n\n    matrix: MatrixCell[][] = [];\n\n    touchSum: number = 0;\n    showSum: number = 0;\n\n    touchEnable: boolean = false;\n    lastTouchCell: Cell = null;\n\n    touchNodeList: cc.Node[] = [];\n\n    cells: Cell[] = [];\n\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.node.on(cc.Node.EventType.TOUCH_START, this.touchStart.bind(this), this);\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.touchMoved.bind(this), this);\n        this.node.on(cc.Node.EventType.TOUCH_END, this.touchEnded.bind(this), this);\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touchEnded.bind(this), this);\n    }\n\n    start () {\n        this.createGame();\n    }\n\n    private drawLine(pos1: cc.Vec2, pos2: cc.Vec2): cc.Graphics {\n        let node = new cc.Node();\n        let graphics = node.addComponent(cc.Graphics);\n        graphics.lineWidth = Config.LINE_WIDTH;\n        graphics.strokeColor = Config.LINE_COLOR;\n        graphics.moveTo(pos1.x, pos1.y);\n        graphics.lineTo(pos2.x, pos2.y);\n        graphics.stroke();\n        node.parent = this.graphicsNode;\n        return graphics;\n    }\n\n    private createGame(): void {\n        for (let row = 0; row < Config.MAX_ROW; row++) {\n            let rowArray = [];\n            for (let col = 0; col < Config.MAX_COL; col++) {\n                // let node = cc.instantiate(this.cellPrefab);\n                // let cell = node.getComponent(Cell);\n                // cell.cellId = XY.generateId();\n                // cell.matrix = cc.v2(col, row);\n                // cell.value = Math.pow(2, this.getRandomIntInclusive(1, 7));\n                let node = this.createRandomCell();\n                let cell = node.getComponent(Cell);\n                cell.matrix = cc.v2(col, row);\n                node.parent = this.mainNode;\n                cell.updatePos();\n                this.cells.push(cell);\n                rowArray.push({node: node});\n            }\n            this.matrix.push(rowArray);\n        }\n    }\n\n    private createRandomCell(): cc.Node {\n        let node = cc.instantiate(this.cellPrefab);\n        let cell = node.getComponent(Cell);\n        cell.cellId = XY.generateId();\n        cell.value = Math.pow(2, this.getRandomIntInclusive(1, 7));\n        return node;\n    }\n\n    private getRandomIntInclusive(min: number, max: number): number {\n        // 确保 min 和 max 是整数\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min; // 包含 min 和 max\n    }\n\n    private addTouchCell(cell: Cell): void {\n        this.touchNodeList.push(cell.node);\n        cell.touched = true;\n        this.touchSum += cell.value;\n        this.showSum = Math.pow(2, Math.ceil(Math.log2(this.touchSum)));\n        this.sumCell.value = this.showSum;\n        this.sumCell.node.active = true;\n        if (cc.isValid(this.lastTouchCell)) {\n            cell.preTouchCell = this.lastTouchCell;\n            cell.graphics = this.drawLine(cell.node.getPosition(), this.lastTouchCell.node.getPosition());\n        }\n        this.lastTouchCell = cell;\n    }\n\n    private removeTouchCell(): void {\n        let cellNode = this.touchNodeList[this.touchNodeList.length - 1];\n        let cell = cellNode.getComponent(Cell);\n        if (cc.isValid(cell.preTouchCell)) {\n            this.touchNodeList.pop();\n            cell.touched = false;\n            cell.graphics = null;\n            \n            this.lastTouchCell = cell.preTouchCell;\n            cell.preTouchCell = null;\n\n            this.touchSum  -= cell.value;\n            this.showSum = Math.pow(2, Math.ceil(Math.log2(this.touchSum)));\n            this.sumCell.value = this.showSum;\n            \n        }\n    }\n\n    private touchStart(event: cc.Event.EventTouch): void {\n        for (let index = 0; index < this.cells.length; index++) {\n            const element = this.cells[index];\n            if(element.node.getBoundingBoxToWorld().contains(event.getLocation())) {\n                this.touchEnable = true;\n                cc.log(`touch id: ${element.cellId} (${element.origin.x}, ${element.origin.y})`);\n                this.addTouchCell(element);\n                return;\n            }\n        }\n    }\n\n    private touchMoved(event: cc.Event.EventTouch): void {\n        if (this.touchEnable) {\n            if (cc.isValid(this.lastTouchCell)) {\n                for (let row = this.lastTouchCell.matrix.y - 1; row <= this.lastTouchCell.matrix.y + 1; row++) {\n                    for (let col = this.lastTouchCell.matrix.x -1; col <= this.lastTouchCell.matrix.x + 1; col++) {\n                        if (row < 0 || row >= Config.MAX_ROW || col < 0 || col >= Config.MAX_COL) {\n                            continue;\n                        }\n                        let cellNode = this.matrix[row][col].node;\n                        if (!cc.isValid(cellNode)) {\n                            continue;\n                        }\n                        let cell = cellNode.getComponent(Cell);\n                        if(cellNode.getBoundingBoxToWorld().contains(event.getLocation())) {\n                            if (cc.isValid(this.lastTouchCell.preTouchCell)) {\n                                if (this.lastTouchCell.preTouchCell.cellId === cell.cellId) {\n                                    this.removeTouchCell();\n                                    return;\n                                }\n                            }\n                            if (cell.touched || cell.value > this.showSum) {\n                                continue;\n                            }\n                            this.addTouchCell(cell);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private updateMatrix(): void {\n        for (let i = 0; i < this.matrix.length; i++) {\n            const element = this.matrix[i];\n            for (let j = 0; j < element.length; j++) {\n                element[j].node = null;\n            }\n        }\n\n        for (let index = 0; index < this.cells.length; index++) {\n            const element = this.cells[index];\n            if (cc.isValid(element)) {\n                this.matrix[element.matrix.y][element.matrix.x].node = element.node;\n            }\n        }\n    }\n\n    private touchEnded(event: cc.Event.EventTouch): void {\n        if (this.touchNodeList.length === 1) {\n            this.lastTouchCell.touched = false;\n            this.lastTouchCell.preTouchCell = null;\n        } else {\n            for (let index = 0; index < this.touchNodeList.length; index++) {\n                const element = this.touchNodeList[index];\n                const cell = element.getComponent(Cell);\n                if (cell.cellId === this.lastTouchCell.cellId) {\n                    this.lastTouchCell.value = this.showSum;\n                    this.lastTouchCell.touched = false;\n                    this.lastTouchCell.preTouchCell = null;\n                } else {\n                    this.cells = this.cells.filter(cell=> cell.cellId != element.getComponent(Cell).cellId);\n                    let elementy = element.getComponent(Cell).matrix.y;\n                    let elementx = element.getComponent(Cell).matrix.x;\n                    element.destroy();\n\n                    let newNode = this.createRandomCell();\n                    let newCell = newNode.getComponent(Cell);\n                    newCell.matrix = cc.v2(elementx, Config.MAX_ROW);\n                    newCell.updatePos();\n                    newCell.matrix = cc.v2(elementx, Config.MAX_ROW - 1);\n                    newCell.updatePos(true);\n                    newNode.parent = this.mainNode;\n                    this.cells.push(newCell);\n\n                    for (let i = elementy + 1; i < this.matrix.length; i++) {\n                        const element1 = this.matrix[i][elementx].node;\n                        if (cc.isValid(element1) && element1.getComponent(Cell).matrix.y > cell.matrix.y) {\n                            element1.getComponent(Cell).matrix = cc.v2(element1.getComponent(Cell).matrix.x, element1.getComponent(Cell).matrix.y - 1);\n                            element1.getComponent(Cell).updatePos(true);\n                        }\n                    }\n                    this.updateMatrix();\n                }\n            }\n            \n        }\n        this.touchSum = 0;\n        this.showSum = 0;\n        this.touchEnable = false;\n        this.lastTouchCell = null;\n        this.touchNodeList = [];\n        this.sumCell.node.active = false;\n    }\n\n    // update (dt) {}\n}\n"]}